# backend/tutor_project/settings.py

"""
Django settings for tutor_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
# Import ImproperlyConfigured if you want to raise an error instead of warning
# from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR should point to the 'backend' directory
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Environment Variables ---
from dotenv import load_dotenv
dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path=dotenv_path)
print(f"Attempting to load .env file from: {dotenv_path}") # Add this print statement for debugging
# Check if the .env file exists
if not os.path.exists(dotenv_path):
    print(f"WARNING: .env file not found at {dotenv_path}. Environment variables might not be loaded.")


# --- API Keys and AI Settings ---
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
# Add a check for the Gemini key as well
if not GEMINI_API_KEY:
    print("WARNING: GEMINI_API_KEY not found in environment variables. AI features will likely fail.")

DEFAULT_GEMINI_MODEL = os.environ.get('DEFAULT_GEMINI_MODEL', "gemini-1.5-flash") # Changed default slightly
DEFAULT_SAFETY_SETTINGS = [ # Define your default safety settings here
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# It's better to load this from env too, but keep it simple for now if needed.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', "django-insecure-3un6c%v09=m86p6$yi3(ij($o(g^u#qq3wfe#r#m9%a#8t8cx4") # Added fallback

# SECURITY WARNING: don't run with debug turned on in production!
# Convert DEBUG value from string 'True'/'False' to boolean
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
# Consider adding '*' for development ease if needed, but be careful
# ALLOWED_HOSTS = ['*'] if DEBUG else ['127.0.0.1', 'localhost', 'your_production_domain.com']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",          # For Cross-Origin Resource Sharing
    'rest_framework',       # For Django REST Framework (if you use serializers etc.)
    'api.apps.ApiConfig'    # Your chat API app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # Consider Whitenoise for static files in production later
    # "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware", # Should be high up, before CommonMiddleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# --- CORS Settings ---
# Make sure these match your frontend development server port
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3001",  # Vite default port often changes, adjust if needed
    "http://127.0.0.1:3001",
    # Add your production frontend URL(s) here when deploying
    # e.g., "https://your-ai-tutor.com"
]
# Optional: Allow specific headers if needed
# CORS_ALLOW_HEADERS = list(default_headers) + [...]
# Optional: Allow credentials if using cookies/sessions across domains
# CORS_ALLOW_CREDENTIALS = True

# --- CSRF Settings ---
# Needed if your frontend makes requests that need CSRF protection (usually not for stateless APIs)
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3001',
    'http://127.0.0.1:3001',
    # Add production frontend URL(s)
]

ROOT_URLCONF = "tutor_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [], # No top-level templates dir needed for this setup
        "APP_DIRS": True, # Looks for templates inside app directories (e.g., for admin)
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug", # Good for development
                "django.template.context_processors.request", # Required by admin
                "django.contrib.auth.context_processors.auth", # Required by admin
                "django.contrib.messages.context_processors.messages", # Required by admin
            ],
        },
    },
]

WSGI_APPLICATION = "tutor_project.wsgi.application" # For WSGI deployments
ASGI_APPLICATION = "tutor_project.asgi.application" # For ASGI deployments (like Uvicorn)


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# --- Load Database Credentials from Environment Variables ---
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'ai_tutor_db'), # Sensible default name
        'USER': os.environ.get('DB_USER', 'postgres'),   # Sensible default user
        'PASSWORD': os.environ.get('DB_PASSWORD'),        # <<< NO DEFAULT PASSWORD!
        'HOST': os.environ.get('DB_HOST', 'localhost'),  # Sensible default host
        'PORT': os.environ.get('DB_PORT', '5432'),      # Sensible default port
    }
}

# --- Check if DB_PASSWORD was loaded ---
if not DATABASES['default'].get('PASSWORD'):
    print("\n" + "="*60)
    print(" DATABASE SECURITY WARNING ".center(60, "="))
    print(" Database password (DB_PASSWORD) not found in environment.")
    print(" Please ensure you have a .env file in the 'backend'")
    print(" directory with DB_PASSWORD set.")
    print(" Example .env content:")
    print("   DB_NAME=ai_tutor_db")
    print("   DB_USER=your_db_user")
    print("   DB_PASSWORD=your_actual_secret_password")
    print("   DB_HOST=localhost")
    print("   DB_PORT=5432")
    print(" Application might fail to connect to the database.")
    print("="*60 + "\n")
    # --- OPTIONAL: Raise an error to prevent running without a password ---
    # raise ImproperlyConfigured(
    #     "DB_PASSWORD environment variable not set. Create a .env file "
    #     "in the 'backend' directory or set the environment variable."
    # )

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # Keep these standard validators
    { "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator", },
    { "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    { "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    { "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True # Recommended for handling timezones correctly


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
# --- Optional: Define STATIC_ROOT for production 'collectstatic' ---
# STATIC_ROOT = BASE_DIR / 'staticfiles_collected'
# --- Optional: Add STATICFILES_DIRS if you have static files outside apps ---
# STATICFILES_DIRS = [ BASE_DIR / "static_global" ]
# --- Optional: Configure Whitenoise storage for production ---
# STORAGES = {
#     "staticfiles": {
#         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     },
# }


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- Logging Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep existing loggers (like Django's)
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            # Added %(name)s to see which logger is being used
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Use simple formatter for console clarity
        },
        # Optional: Add a file handler for persistent logs
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'debug.log', # Log file in backend folder
        #     'formatter': 'verbose',
        # },
    },
    'root': { # Catch-all logger
        'handlers': ['console'], # Add 'file' here if using file handler
        'level': 'WARNING', # Set root higher to reduce noise, specific loggers override
    },
    'loggers': {
        'django': { # Django specific logs
            'handlers': ['console'],
            'level': 'INFO', # Or 'WARNING'
            'propagate': False, # Don't send to root logger
        },
        'django.server': { # Logs for runserver/uvicorn requests
            'handlers': ['console'],
            'level': 'INFO', # Keep INFO to see request logs (GET/POST/status codes)
            'propagate': False,
        },
        'api': { # Logger for YOUR application code (api.*)
            'handlers': ['console'], # Add 'file' here if using file handler
            'level': 'DEBUG', # <<< Keep DEBUG for development
            'propagate': False, # Don't send to root
        },
        # Add other specific loggers if needed (e.g., 'uvicorn', 'daphne')
        'uvicorn.error': {
             'handlers': ['console'],
             'level': 'INFO',
             'propagate': False,
        },
         'uvicorn.access': {
             'handlers': ['console'],
             'level': 'INFO',
             'propagate': False,
        },
    }
}

# --- REST Framework Settings (Optional but common) ---
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         # Add authentication classes when you implement auth
#         # 'rest_framework.authentication.SessionAuthentication',
#         # 'rest_framework.authentication.TokenAuthentication',
#     ],
#     'DEFAULT_PERMISSION_CLASSES': [
#         # Set default permissions (e.g., allow any for now, restrict later)
#         'rest_framework.permissions.AllowAny',
#     ]
# }